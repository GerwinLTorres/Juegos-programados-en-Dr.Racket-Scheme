(require(lib"graphics.ss""graphics"))
(open-graphics)
;-------------------------------------------------------------------------------------------------------------------
; ventana de creditos
(define cventana(open-viewport "creditos" 700 600))
((draw-pixmap cventana) "creditos2.png" (make-posn 0 0))
(sleep 2)
(close-viewport cventana)
;-----------------------------------------------------------------------------------------------------------------
;ventanas de trancicion
(define (j)
  (define jventana(open-viewport "j" 600 180))
  ((draw-pixmap jventana) "j.png" (make-posn 0 0))
  (sleep 1)
  (close-viewport jventana)
  )
(define (j1)
  (define j1ventana(open-viewport "j1" 680 180))
  ((draw-pixmap j1ventana) "j1.png" (make-posn 0 0))
  (sleep 1)
  (close-viewport j1ventana)
  )
(define (j2)
  (define j2ventana(open-viewport "j1" 680 180))
  ((draw-pixmap j2ventana) "j2.png" (make-posn 0 0))
  (sleep 1)
  (close-viewport j2ventana)
  )
(define (j3)
  (define j3ventana(open-viewport "j3" 680 180))
  ((draw-pixmap j3ventana) "j3.png" (make-posn 0 0))
  (sleep 1)
  (close-viewport j3ventana)
  )
(define (gj)
  (define gjventana(open-viewport "gana jugador " 700 600))
  ((draw-pixmap gjventana) "ganadorj.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport gjventana)
  )
(define (gj1)
  (define gj1ventana(open-viewport "gana jugador 1" 700 600))
  ((draw-pixmap gj1ventana) "ganadorj1.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport gj1ventana)
  )
(define (gj2)
  (define gj2ventana(open-viewport "gana jugador 2" 700 600))
  ((draw-pixmap gj2ventana) "ganadorJ2.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport gj2ventana)
  )
(define (gj3)
  (define gj3ventana(open-viewport "gana jugador 3" 700 600))
  ((draw-pixmap gj3ventana) "ganadorJ3.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport gj3ventana)
  )
(define (emp)
  (define empventana(open-viewport "Empate" 700 600))
  ((draw-pixmap empventana) "empate.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport empventana)
  )
(define (demp12)
  (define des12ventana(open-viewport "Desempate entre J1 y J2" 600 180))
  ((draw-pixmap des12ventana) "desempatej1j2.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport des12ventana)
  )
(define (demp13)
  (define des13ventana(open-viewport "Desempate entre J1 y J3" 600 180))
  ((draw-pixmap des13ventana) "desempatej1j3.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport des13ventana)
  )
(define (demp23)
  (define des23ventana(open-viewport "Desempate entre J2 y J3" 600 180))
  ((draw-pixmap des23ventana) "desempatej2j3.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport des23ventana)
  )
(define (maq)
  (define maqventana(open-viewport "gana la maquina" 700 600))
  ((draw-pixmap maqventana) "ganadorPC.png" (make-posn 0 0))
  (sleep 3)
  (close-viewport maqventana)
  )
;------------------------------------------------------------
; funcion para definir quien gana  en pvp{jugador vs jugador}
(define vecj1 (make-vector 1))
(define vecj2 (make-vector 1))
(define(ganador vecj1 vecj2)
  (cond
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\t))
     (gj2))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\p))
     (gj1))
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\r))
     (gj1))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\p))
     (gj2))
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\p))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\t))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\r))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\t))
     (gj1))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\r))
     (gj2))
    )
  )
;esta funcion hace que el programa escoja una respuesta en la opcion de jugar con la maquina
(define (maquina vecj2)
  (cond
    ((= (random 4) 1) (vector-set! vecj2 0 #\p))
    ((= (random 4) 2) (vector-set! vecj2 0 #\r))
    ((= (random 4) 3) (vector-set! vecj2 0 #\t))
    (else (maquina vecj2))
    )
  )
; misma funcion que en pvp pero con la modificacion de las pantallas de trancicion 
(define(ganadorpvc vecj1 vecj2)
  (cond
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\t))
     (maq))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\p))
     (gj))
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\r))
     (gj))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\p))
     (maq))
    ((and(char=? (vector-ref vecj1 0) #\p)(char=? (vector-ref vecj2 0) #\p))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\t))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\r))
     (emp))
    ((and(char=? (vector-ref vecj1 0) #\r)(char=? (vector-ref vecj2 0) #\t))
     (gj))
    ((and(char=? (vector-ref vecj1 0) #\t)(char=? (vector-ref vecj2 0) #\r))
     (maq))
    )
  )
; funcion de la ventana pvp (jugador vs jugador)
(define (ventanapvp) 
  ;---------------------------------------------------------------------------------------------------------
  ; define la ventana pvp para poder operar con el mouse en ella  
  (define pvpventana (open-viewport "PvP" 700 600))
  ((draw-pixmap pvpventana) "ventanapvp.png" (make-posn 0 0))
  (get-mouse-click pvpventana)
  (define x (posn-x (query-mouse-posn pvpventana)))
  (define y (posn-y (query-mouse-posn pvpventana)))
  (cond
    ((and(>= x 625) (<= x 662) (>= y 46) (<= y 90))
     (begin
       (close-viewport pvpventana)
       (ventana)
       )
     )
    ((and(>= x 140) (<= x 188) (>= y 446) (<= y 566))
     (begin
       (vector-set! vecj1 0 #\p)
       (close-viewport pvpventana)
       (j1)
       (ventanapvp)
       )
     )
    ((and(>= x 214) (<= x 253) (>= y 305) (<= y 414))
     (begin
       (vector-set! vecj1 0 #\r)
       (close-viewport pvpventana)
       (j1)
       (ventanapvp)
       )
     )
    ((and(>= x 87) (<= x 134) (>= y 291) (<= y 415))
     (begin
       (vector-set! vecj1 0 #\t)
       (close-viewport pvpventana)
       (j1)
       (ventanapvp)
       )
     )
    ((and(>= x 506) (<= x 547) (>= y 446) (<= y 566))
     (begin
       (vector-set! vecj2 0 #\p)
       (close-viewport pvpventana)
       (j2)
       (ganador vecj1 vecj2)
       (ventanapvp)
       )
     )
    ((and(>= x 574) (<= x 612) (>= y 305) (<= y 414))
     (begin
       (vector-set! vecj2 0 #\r)
       (close-viewport pvpventana)
       (j2)
       (ganador vecj1 vecj2)
       (ventanapvp)
       )
     )
    ((and(>= x 454) (<= x 500) (>= y 286) (<= y 412))
     (begin
       (vector-set! vecj2 0 #\t)
       (close-viewport pvpventana)
       (j2)
       (ganador vecj1 vecj2)
       (ventanapvp)
       )
     )
    (else
     (begin
       (close-viewport pvpventana)
       (ventanapvp)))
    )
  )


;------------------------------------------------------------------------------------------------
(define (ventana3p)
  (define 3pventana (open-viewport "3P" 700 600))
  ((draw-pixmap 3pventana) "ventanap3.png" (make-posn 0 0))
  (get-mouse-click 3pventana)
  (define x (posn-x (query-mouse-posn 3pventana)))
  (define y (posn-y (query-mouse-posn 3pventana)))
  (cond
    ((and(>= x 625) (<= x 662) (>= y 46) (<= y 90))
     (begin
       (close-viewport 3pventana)
       (ventana)))
       ((and(>= x 90) (<= x 136) (>= y 441) (<= y 556))
     (begin
       (vector-set! vecj1 0 #\p)
       (close-viewport 3pventana)
       (j1)
       (ventana3p)
       )
     )
    ((and(>= x 133) (<= x 170) (>= y 326) (<= y 426))
     (begin
       (vector-set! vecj1 0 #\r)
       (close-viewport 3pventana)
       (j1)
       (ventana3p)
       )
     )
    ((and(>= x 53) (<= x 100) (>= y 297) (<= y 426))
     (begin
       (vector-set! vecj1 0 #\t)
       (close-viewport 3pventana)
       (j1)
       (ventana3p)
       )
     )
    ((and(>= x 322) (<= x 362) (>= y 441) (<= y 556))
     (begin
       (vector-set! vecj2 0 #\p)
       (close-viewport 3pventana)
       (j2)
       (ventana3p)
       )
     )
    ((and(>= x 366) (<= x 404) (>= y 326) (<= y 426))
     (begin
       (vector-set! vecj2 0 #\r)
       (close-viewport 3pventana)
       (j2)
       (ventana3p)
       )
     )
    ((and(>= x 284) (<= x 332) (>= y 297) (<= y 426))
     (begin
       (vector-set! vecj2 0 #\t)
       (close-viewport 3pventana)
       (j2)
       (ventana3p)
       )
     )
     ((and(>= x 572) (<= x 611) (>= y 441) (<= y 556))
     (begin
       (vector-set! vecj2 0 #\p)
       (close-viewport 3pventana)
       (j3)
       (ganador3p vecj1 vecj2 vecj3)
       )
     )
    ((and(>= x 617) (<= x 656) (>= y 326) (<= y 426))
     (begin
       (vector-set! vecj2 0 #\r)
       (close-viewport 3pventana)
       (j3)
       (ganador3p vecj1 vecj2 vecj3)
       )
     )
    ((and(>= x 525) (<= x 571) (>= y 297) (<= y 426))
     (begin
       (vector-set! vecj2 0 #\t)
       (close-viewport 3pventana)
       (j3)
       (ganador3p vecj1 vecj2 vecj3)
       )
     )
     (else
     (begin
       (close-viewport 3pventana)
       (ventana3p)))
    )
  )
;----------------------------------------------------------------------------------------------------
;define la funcion de la pantalla pvc {jugador vs maquina}
(define (ventanapvc)
  ;define la ventana pvc para poder operar con el mouse en ella
  (define pvcventana (open-viewport "PvC" 700 600))
  ((draw-pixmap pvcventana) "ventanapvc.png" (make-posn 0 0))
  (get-mouse-click pvcventana)
  (define x (posn-x (query-mouse-posn pvcventana)))
  (define y (posn-y (query-mouse-posn pvcventana)))
  (cond
    ((and(>= x 625) (<= x 662) (>= y 46) (<= y 90))
     (begin
       (close-viewport pvcventana)
       (ventana)
       )
     )
    ((and(>= x 140) (<= x 188) (>= y 446) (<= y 566))
     (begin
       (vector-set! vecj1 0 #\p)
       (close-viewport pvcventana)
       (j)
       (maquina vecj2)
       (ganadorpvc vecj1 vecj2)
       (ventanapvc)
       )
     )
    ((and(>= x 214) (<= x 253) (>= y 305) (<= y 414))
     (begin
       (vector-set! vecj1 0 #\r)
       (close-viewport pvcventana)
       (j)
       (maquina vecj2)
       (ganadorpvc vecj1 vecj2)
       (ventanapvc)
       )
     )
    ((and(>= x 87) (<= x 134) (>= y 291) (<= y 415))
     (begin
       (vector-set! vecj1 0 #\t)
       (close-viewport pvcventana)
       (j)
       (maquina vecj2)
       (ganadorpvc vecj1 vecj2)
       (ventanapvc)
       )
     )
    (else
     (begin
       (close-viewport pvcventana)
       (ventanapvc)))
    )
  )
;---------------------------------------------------------------
;ventana principal( el menu)
(define (ventana)
  (define wventana(open-viewport"proyecto final" 700 600))
  ((draw-pixmap wventana) "menu.png" (make-posn 0 0))
  (get-mouse-click wventana) 
  (define x (posn-x (query-mouse-posn wventana)))
  (define y (posn-y (query-mouse-posn wventana)))
  (cond
    ((and(>= x  174)(<= x 282)(>= y 412  )(<= y 449))
     (begin
       (close-viewport wventana)
       (ventanapvp))
     )
    ((and(>= x  312)(<= x 415)(>= y 398  )(<= y 439))
     (begin
       (close-viewport wventana)
       (ventana3p))
     )
    ((and(>= x  436)(<= x 541)(>= y 410  )(<= y 445))
     (begin
       (close-viewport wventana)
       (ventanapvc))
     )
    (else
     (begin
       (close-viewport wventana)
       (ventana)))
    )
  )
(ventana)
         






   

